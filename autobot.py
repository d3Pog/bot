from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes, CallbackContext, JobQueue
)
import datetime

# –≠—Ç–∞–ø—ã
(MAIN_MENU, COUNTRY, MARKA, DRIVE, FUEL, YEAR, MILEAGE, DAMAGE, BUDGET, CITY,
 CONTACT, PHONE_REQUEST, CONFIRM, EDIT_SELECT) = range(14)

# –ß–∞—Ç—ã
MANAGER_JAPAN_CHINA_ID = 1054391474
MANAGER_KOREA_UAE_ID = 569926688
GROUP_CHAT_ID = -4985828342

step_names = {
    COUNTRY: "–°—Ç—Ä–∞–Ω–∞",
    MARKA: "–ú–∞—Ä–∫–∞",
    DRIVE: "–ü—Ä–∏–≤–æ–¥",
    FUEL: "–¢–æ–ø–ª–∏–≤–æ",
    YEAR: "–ì–æ–¥",
    MILEAGE: "–ü—Ä–æ–±–µ–≥",
    DAMAGE: "–°–æ—Å—Ç–æ—è–Ω–∏–µ",
    BUDGET: "–ë—é–¥–∂–µ—Ç",
    CITY: "–ì–æ—Ä–æ–¥",
    CONTACT: "–°–≤—è–∑—å",
    PHONE_REQUEST: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
}

step_prompts = {
    COUNTRY: ("üåç –ò–∑ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ?", ["üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", "üáØüáµ –Ø–ø–æ–Ω–∏—è", "üá®üá≥ –ö–∏—Ç–∞–π", "üá¶üá™ –û–ê–≠"]),
    MARKA: ("1Ô∏è‚É£ –ö–∞–∫–∞—è –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota Prius)", []),
    DRIVE: ("2Ô∏è‚É£ –ü—Ä–∏–≤–æ–¥?", ["üöô 2WD", "üõû 4WD"]),
    FUEL: ("3Ô∏è‚É£ –¢–æ–ø–ª–∏–≤–æ?", ["‚õΩ –ë–µ–Ω–∑–∏–Ω", "üõ¢Ô∏è –î–∏–∑–µ–ª—å", "üîã –ì–∏–±—Ä–∏–¥", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ"]),
    YEAR: ("4Ô∏è‚É£ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2021)", []),
    MILEAGE: ("5Ô∏è‚É£ –ü—Ä–æ–±–µ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 100000 –∫–º)", []),
    DAMAGE: ("6Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ:", ["‚úÖ –ë–µ–∑ –î–¢–ü", "üõ† –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", "ü§∑ –ù–µ –≤–∞–∂–Ω–æ"]),
    BUDGET: ("7Ô∏è‚É£ –ë—é–¥–∂–µ—Ç –ø–æ–¥ –∫–ª—é—á (–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?)", []),
    CITY: ("8Ô∏è‚É£ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:", []),
    CONTACT: ("9Ô∏è‚É£ –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏?", ["üí¨ Telegram", "üì± WhatsApp", "üìû –ó–≤–æ–Ω–æ–∫"]),
    PHONE_REQUEST: ("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", [])
}

def make_keyboard(options, include_back=True):
    buttons = [[opt] for opt in options]
    if include_back:
        buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    buttons.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

def phone_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
        ["‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True, one_time_keyboard=True)

async def remind_incomplete(context: CallbackContext):
    chat_id = context.job.chat_id
    user_data = context.application.user_data.get(chat_id, {})
    if not user_data.get("completed"):
        await context.bot.send_message(
            chat_id=chat_id,
            text="üëã –í—ã –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=make_keyboard(["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"], include_back=False)
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["started_at"] = datetime.datetime.now()
    context.user_data["completed"] = False

    context.job_queue.run_once(
        remind_incomplete,
        when=86400,
        chat_id=update.effective_chat.id,
        name=f"reminder_{update.effective_chat.id}"
    )

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DemMax üöó\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        return await ask_question(update, context, COUNTRY)
    elif text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        incomplete_steps = [s for s in step_names if step_names[s] not in context.user_data]
        return await ask_question(update, context, incomplete_steps[0]) if incomplete_steps else await review_application(update, context)
    elif text == "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏":
        await update.message.reply_text("DemMax ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ –∏–∑ –Ø–ø–æ–Ω–∏–∏, –ö–æ—Ä–µ–∏, –ö–∏—Ç–∞—è –∏ –û–ê–≠.")
        return MAIN_MENU
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text("üìû +7 924 836-20-30\nüåê https://dem-max.ru")
        return MAIN_MENU
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    else:
        return await start(update, context)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE, step):
    prompt, options = step_prompts.get(step, ("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", []))
    include_back = step != COUNTRY
    if step == PHONE_REQUEST:
        await update.message.reply_text(prompt, reply_markup=phone_keyboard())
    else:
        await update.message.reply_text(prompt, reply_markup=make_keyboard(options, include_back))
    return step

async def handle_step(update: Update, context: ContextTypes.DEFAULT_TYPE, step):
    text = update.message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        prev_step = step - 1
        return await ask_question(update, context, prev_step)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)

    context.user_data[step_names[step]] = text

    if step == CONTACT:
        return await ask_question(update, context, PHONE_REQUEST)

    if step == PHONE_REQUEST:
        return await review_application(update, context)

    if context.user_data.get("_editing"):
        context.user_data.pop("_editing")
        return await review_application(update, context)

    return await ask_question(update, context, step + 1)

async def phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.effective_message.contact
    if contact and contact.phone_number:
        context.user_data["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"] = contact.phone_number
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.")
        return PHONE_REQUEST

    if context.user_data.get("_editing"):
        context.user_data.pop("_editing")
    return await review_application(update, context)

async def review_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = "\n".join([
        f"üìç {step_names[s]}: {context.user_data.get(step_names[s])}"
        for s in step_names
        if step_names[s] in context.user_data
    ])
    await update.message.reply_text(
        f"üßæ –ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –≤–µ—Ä–Ω–æ:\n\n{summary}",
        reply_markup=make_keyboard(["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å"])
    )
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=make_keyboard(list(step_names.values()), include_back=False)
        )
        return EDIT_SELECT
    elif choice == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        context.user_data["completed"] = True
        user = update.effective_user
        context.user_data["Telegram"] = f"@{user.username}" if user.username else f"ID: {user.id}"

        full_text = f"üïí –í—Ä–µ–º—è: {context.user_data.get('started_at')}\n"
        full_text += "\n".join([
            f"üìç {step_names[s]}: {context.user_data.get(step_names[s])}"
            for s in step_names
            if step_names[s] in context.user_data
        ])
        full_text += f"\nüì® Telegram: {context.user_data['Telegram']}"

        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{full_text}")
        if context.user_data["–°—Ç—Ä–∞–Ω–∞"] in ["üáØüáµ –Ø–ø–æ–Ω–∏—è", "üá®üá≥ –ö–∏—Ç–∞–π"]:
            await context.bot.send_message(chat_id=MANAGER_JAPAN_CHINA_ID, text=f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{full_text}")
        else:
            await context.bot.send_message(chat_id=MANAGER_KOREA_UAE_ID, text=f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{full_text}")

        await update.message.reply_text("üî• –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu_keyboard())
        return MAIN_MENU
    return CONFIRM

async def edit_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field_name = update.message.text
    for step, name in step_names.items():
        if name == field_name:
            context.user_data.pop(name, None)
            context.user_data["_editing"] = True
            return await ask_question(update, context, step)
    await update.message.reply_text("–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return EDIT_SELECT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
    return MAIN_MENU

def main():
    app = Application.builder().token("7879339836:AAG7qEivcsB3DzzO6MvapdRfmY8ryFWRUFM").build()
    app.job_queue.set_application(app)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, COUNTRY))],
            MARKA: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, MARKA))],
            DRIVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, DRIVE))],
            FUEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, FUEL))],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, YEAR))],
            MILEAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, MILEAGE))],
            DAMAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, DAMAGE))],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, BUDGET))],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, CITY))],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_step(u, c, CONTACT))],
            PHONE_REQUEST: [MessageHandler(filters.CONTACT, phone_input)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
            EDIT_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_select)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
